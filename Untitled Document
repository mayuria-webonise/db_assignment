select * from users;


drop trigger update_price;


delimiter $$
CREATE TRIGGER update_price
AFTER INSERT ON cart
FOR EACH ROW

BEGIN
declare userid int;
declare cost double ;
declare orderid int;
declare sum double;

-- select order_id into orderid from cart where order_id = NEW.order_id;
select order_cost into sum from orders where id = NEW.order_id;
select price into cost from products where id = NEW.product_id;
set sum:= sum + cost;
update orders set order_cost = sum where id = NEW.order_id;
END;
$$ delimiter

select order_id from cart where order_id = 1;
select order_cost from orders where id = 1;
select price from products where id = 2;

insert into orders(id,order_cost,order_date,user_id) values(order_id,price,now(),user_id);
insert into cart(order_id,product_id) values(1,4);

select * from orders;
delete from cart;
select * from cart;
insert into orders(id,order_cost,order_date,user_id) values(1,0,now(),1);
insert into orders(id,order_cost,order_date,user_id) values(2,0,now(),1);
select * from users;

select * from payment;

ALTER TABLE payment AUTO_INCREMENT=1;
drop procedure proceed_payment;

delimiter $$
CREATE PROCEDURE proceed_payment(orderid int, userid int, paymentmode int)
BEGIN
	declare cost double;
	declare discount double;
	select order_cost into cost from orders where id=orderid and user_id=userid;
	select discount_amount into discount from payment_modes where id= paymentmode;
	set cost= cost-discount;
	insert into payment(order_id,user_id,payment_mode_id,payment_status,payment_amount) values(orderid,userid,paymentmode,1,cost);
   
END$$
 delimiter;
select * from payment_modes;
call proceed_payment(1,1,1);
select order_cost from orders where id=orderid and user_id=userid;

create view products_sold as
SELECT o.id,o.order_cost,o.order_date,pm.discount_amount,pm.payment_mode,p.payment_status
FROM orders o
INNER JOIN payment p
ON o.id=p.order_id
INNER JOIN payment_modes pm
ON p.payment_mode_id=pm.id; 

select * from products_sold;



















